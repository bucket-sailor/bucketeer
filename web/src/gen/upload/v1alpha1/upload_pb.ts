// SPDX-License-Identifier: AGPL-3.0-or-later
//
// Copyright 2024 Damian Peckett <damian@pecke.tt>.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file upload/v1alpha1/upload.proto (package bucketeer.upload.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * CompletionStatus is the status of an upload.
 *
 * @generated from enum bucketeer.upload.v1alpha1.CompletionStatus
 */
export enum CompletionStatus {
  /**
   * The completion of the upload is still pending.
   *
   * @generated from enum value: PENDING = 0;
   */
  PENDING = 0,

  /**
   * The upload has been completed is ready for downloads.
   *
   * @generated from enum value: COMPLETED = 1;
   */
  COMPLETED = 1,

  /**
   * Completion of the upload failed.
   *
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CompletionStatus)
proto3.util.setEnumType(CompletionStatus, "bucketeer.upload.v1alpha1.CompletionStatus", [
  { no: 0, name: "PENDING" },
  { no: 1, name: "COMPLETED" },
  { no: 2, name: "FAILED" },
]);

/**
 * @generated from message bucketeer.upload.v1alpha1.NewRequest
 */
export class NewRequest extends Message<NewRequest> {
  /**
   * The destination path of the uploaded file.
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * The total size of the uploaded file.
   *
   * @generated from field: int64 size = 2;
   */
  size = protoInt64.zero;

  /**
   * The expected checksum of the uploaded file in the format "algorithm:hex".
   *
   * @generated from field: string checksum = 3;
   */
  checksum = "";

  constructor(data?: PartialMessage<NewRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.upload.v1alpha1.NewRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "checksum", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewRequest {
    return new NewRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewRequest {
    return new NewRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewRequest {
    return new NewRequest().fromJsonString(jsonString, options);
  }

  static equals(a: NewRequest | PlainMessage<NewRequest> | undefined, b: NewRequest | PlainMessage<NewRequest> | undefined): boolean {
    return proto3.util.equals(NewRequest, a, b);
  }
}

/**
 * @generated from message bucketeer.upload.v1alpha1.CompleteResponse
 */
export class CompleteResponse extends Message<CompleteResponse> {
  /**
   * The status of the upload.
   *
   * @generated from field: bucketeer.upload.v1alpha1.CompletionStatus status = 1;
   */
  status = CompletionStatus.PENDING;

  /**
   * The error message if the upload failed.
   *
   * @generated from field: string error = 2;
   */
  error = "";

  constructor(data?: PartialMessage<CompleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.upload.v1alpha1.CompleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(CompletionStatus) },
    { no: 2, name: "error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompleteResponse {
    return new CompleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompleteResponse {
    return new CompleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompleteResponse {
    return new CompleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CompleteResponse | PlainMessage<CompleteResponse> | undefined, b: CompleteResponse | PlainMessage<CompleteResponse> | undefined): boolean {
    return proto3.util.equals(CompleteResponse, a, b);
  }
}

