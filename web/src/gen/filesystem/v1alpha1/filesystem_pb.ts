// SPDX-License-Identifier: AGPL-3.0-or-later
//
// Copyright 2024 Damian Peckett <damian@pecke.tt>.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file filesystem/v1alpha1/filesystem.proto (package bucketeer.filesystem.v1alpha1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message bucketeer.filesystem.v1alpha1.FileInfo
 */
export class FileInfo extends Message<FileInfo> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool is_dir = 2;
   */
  isDir = false;

  /**
   * @generated from field: int64 size = 3;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp mod_time = 4;
   */
  modTime?: Timestamp;

  constructor(data?: PartialMessage<FileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.filesystem.v1alpha1.FileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "is_dir", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mod_time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileInfo {
    return new FileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FileInfo | PlainMessage<FileInfo> | undefined, b: FileInfo | PlainMessage<FileInfo> | undefined): boolean {
    return proto3.util.equals(FileInfo, a, b);
  }
}

/**
 * @generated from message bucketeer.filesystem.v1alpha1.ReadDirRequest
 */
export class ReadDirRequest extends Message<ReadDirRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: int64 start_index = 3;
   */
  startIndex = protoInt64.zero;

  /**
   * @generated from field: int64 stop_index = 4;
   */
  stopIndex = protoInt64.zero;

  constructor(data?: PartialMessage<ReadDirRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.filesystem.v1alpha1.ReadDirRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "stop_index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadDirRequest {
    return new ReadDirRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadDirRequest {
    return new ReadDirRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadDirRequest {
    return new ReadDirRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadDirRequest | PlainMessage<ReadDirRequest> | undefined, b: ReadDirRequest | PlainMessage<ReadDirRequest> | undefined): boolean {
    return proto3.util.equals(ReadDirRequest, a, b);
  }
}

/**
 * @generated from message bucketeer.filesystem.v1alpha1.ReadDirResponse
 */
export class ReadDirResponse extends Message<ReadDirResponse> {
  /**
   * ID is a unique identifier for the operation. It can be used to
   * retrieve the same list of files in a subsequent request.
   * This avoids issues with unstable pagination.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Files is the list of files in the directory (limited to the
   * optionally provided start and stop indexes).
   *
   * @generated from field: repeated bucketeer.filesystem.v1alpha1.ReadDirResponse.FileInfoWithIndex files = 2;
   */
  files: ReadDirResponse_FileInfoWithIndex[] = [];

  constructor(data?: PartialMessage<ReadDirResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.filesystem.v1alpha1.ReadDirResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "files", kind: "message", T: ReadDirResponse_FileInfoWithIndex, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadDirResponse {
    return new ReadDirResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadDirResponse {
    return new ReadDirResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadDirResponse {
    return new ReadDirResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadDirResponse | PlainMessage<ReadDirResponse> | undefined, b: ReadDirResponse | PlainMessage<ReadDirResponse> | undefined): boolean {
    return proto3.util.equals(ReadDirResponse, a, b);
  }
}

/**
 * @generated from message bucketeer.filesystem.v1alpha1.ReadDirResponse.FileInfoWithIndex
 */
export class ReadDirResponse_FileInfoWithIndex extends Message<ReadDirResponse_FileInfoWithIndex> {
  /**
   * The position of the file in the complete directory listing.
   * This is effectively a stable identifier for the file across
   * multiple requests with the same list identifier.
   *
   * @generated from field: int64 index = 1;
   */
  index = protoInt64.zero;

  /**
   * @generated from field: bucketeer.filesystem.v1alpha1.FileInfo file_info = 2;
   */
  fileInfo?: FileInfo;

  constructor(data?: PartialMessage<ReadDirResponse_FileInfoWithIndex>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "bucketeer.filesystem.v1alpha1.ReadDirResponse.FileInfoWithIndex";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "index", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "file_info", kind: "message", T: FileInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadDirResponse_FileInfoWithIndex {
    return new ReadDirResponse_FileInfoWithIndex().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadDirResponse_FileInfoWithIndex {
    return new ReadDirResponse_FileInfoWithIndex().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadDirResponse_FileInfoWithIndex {
    return new ReadDirResponse_FileInfoWithIndex().fromJsonString(jsonString, options);
  }

  static equals(a: ReadDirResponse_FileInfoWithIndex | PlainMessage<ReadDirResponse_FileInfoWithIndex> | undefined, b: ReadDirResponse_FileInfoWithIndex | PlainMessage<ReadDirResponse_FileInfoWithIndex> | undefined): boolean {
    return proto3.util.equals(ReadDirResponse_FileInfoWithIndex, a, b);
  }
}

