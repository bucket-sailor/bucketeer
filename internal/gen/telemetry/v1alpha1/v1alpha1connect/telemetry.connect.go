// SPDX-License-Identifier: AGPL-3.0-or-later
//
// Copyright 2024 Damian Peckett <damian@pecke.tt>.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: telemetry/v1alpha1/telemetry.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/bucket-sailor/bucketeer/internal/gen/telemetry/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TelemetryName is the fully-qualified name of the Telemetry service.
	TelemetryName = "bucketeer.telemetry.v1alpha1.Telemetry"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TelemetryReportProcedure is the fully-qualified name of the Telemetry's Report RPC.
	TelemetryReportProcedure = "/bucketeer.telemetry.v1alpha1.Telemetry/Report"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	telemetryServiceDescriptor      = v1alpha1.File_telemetry_v1alpha1_telemetry_proto.Services().ByName("Telemetry")
	telemetryReportMethodDescriptor = telemetryServiceDescriptor.Methods().ByName("Report")
)

// TelemetryClient is a client for the bucketeer.telemetry.v1alpha1.Telemetry service.
type TelemetryClient interface {
	Report(context.Context, *connect.Request[v1alpha1.TelemetryEvent]) (*connect.Response[emptypb.Empty], error)
}

// NewTelemetryClient constructs a client for the bucketeer.telemetry.v1alpha1.Telemetry service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTelemetryClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TelemetryClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &telemetryClient{
		report: connect.NewClient[v1alpha1.TelemetryEvent, emptypb.Empty](
			httpClient,
			baseURL+TelemetryReportProcedure,
			connect.WithSchema(telemetryReportMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// telemetryClient implements TelemetryClient.
type telemetryClient struct {
	report *connect.Client[v1alpha1.TelemetryEvent, emptypb.Empty]
}

// Report calls bucketeer.telemetry.v1alpha1.Telemetry.Report.
func (c *telemetryClient) Report(ctx context.Context, req *connect.Request[v1alpha1.TelemetryEvent]) (*connect.Response[emptypb.Empty], error) {
	return c.report.CallUnary(ctx, req)
}

// TelemetryHandler is an implementation of the bucketeer.telemetry.v1alpha1.Telemetry service.
type TelemetryHandler interface {
	Report(context.Context, *connect.Request[v1alpha1.TelemetryEvent]) (*connect.Response[emptypb.Empty], error)
}

// NewTelemetryHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTelemetryHandler(svc TelemetryHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	telemetryReportHandler := connect.NewUnaryHandler(
		TelemetryReportProcedure,
		svc.Report,
		connect.WithSchema(telemetryReportMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bucketeer.telemetry.v1alpha1.Telemetry/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TelemetryReportProcedure:
			telemetryReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTelemetryHandler returns CodeUnimplemented from all methods.
type UnimplementedTelemetryHandler struct{}

func (UnimplementedTelemetryHandler) Report(context.Context, *connect.Request[v1alpha1.TelemetryEvent]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.telemetry.v1alpha1.Telemetry.Report is not implemented"))
}
