// SPDX-License-Identifier: AGPL-3.0-or-later
//
// Copyright 2024 Damian Peckett <damian@pecke.tt>.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: filesystem/v1alpha1/filesystem.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/bucket-sailor/bucketeer/internal/gen/filesystem/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FilesystemName is the fully-qualified name of the Filesystem service.
	FilesystemName = "bucketeer.filesystem.v1alpha1.Filesystem"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FilesystemReadDirProcedure is the fully-qualified name of the Filesystem's ReadDir RPC.
	FilesystemReadDirProcedure = "/bucketeer.filesystem.v1alpha1.Filesystem/ReadDir"
	// FilesystemStatProcedure is the fully-qualified name of the Filesystem's Stat RPC.
	FilesystemStatProcedure = "/bucketeer.filesystem.v1alpha1.Filesystem/Stat"
	// FilesystemMkdirAllProcedure is the fully-qualified name of the Filesystem's MkdirAll RPC.
	FilesystemMkdirAllProcedure = "/bucketeer.filesystem.v1alpha1.Filesystem/MkdirAll"
	// FilesystemRemoveAllProcedure is the fully-qualified name of the Filesystem's RemoveAll RPC.
	FilesystemRemoveAllProcedure = "/bucketeer.filesystem.v1alpha1.Filesystem/RemoveAll"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	filesystemServiceDescriptor         = v1alpha1.File_filesystem_v1alpha1_filesystem_proto.Services().ByName("Filesystem")
	filesystemReadDirMethodDescriptor   = filesystemServiceDescriptor.Methods().ByName("ReadDir")
	filesystemStatMethodDescriptor      = filesystemServiceDescriptor.Methods().ByName("Stat")
	filesystemMkdirAllMethodDescriptor  = filesystemServiceDescriptor.Methods().ByName("MkdirAll")
	filesystemRemoveAllMethodDescriptor = filesystemServiceDescriptor.Methods().ByName("RemoveAll")
)

// FilesystemClient is a client for the bucketeer.filesystem.v1alpha1.Filesystem service.
type FilesystemClient interface {
	// ReadDir returns a list of files in a directory.
	ReadDir(context.Context, *connect.Request[v1alpha1.ReadDirRequest]) (*connect.Response[v1alpha1.ReadDirResponse], error)
	// Stat returns information about a file or directory.
	Stat(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.FileInfo], error)
	// MkdirAll creates a directory and any necessary parents.
	MkdirAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// RemoveAll removes a directory and any children it contains.
	RemoveAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
}

// NewFilesystemClient constructs a client for the bucketeer.filesystem.v1alpha1.Filesystem service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFilesystemClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FilesystemClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &filesystemClient{
		readDir: connect.NewClient[v1alpha1.ReadDirRequest, v1alpha1.ReadDirResponse](
			httpClient,
			baseURL+FilesystemReadDirProcedure,
			connect.WithSchema(filesystemReadDirMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		stat: connect.NewClient[wrapperspb.StringValue, v1alpha1.FileInfo](
			httpClient,
			baseURL+FilesystemStatProcedure,
			connect.WithSchema(filesystemStatMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		mkdirAll: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+FilesystemMkdirAllProcedure,
			connect.WithSchema(filesystemMkdirAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		removeAll: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+FilesystemRemoveAllProcedure,
			connect.WithSchema(filesystemRemoveAllMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// filesystemClient implements FilesystemClient.
type filesystemClient struct {
	readDir   *connect.Client[v1alpha1.ReadDirRequest, v1alpha1.ReadDirResponse]
	stat      *connect.Client[wrapperspb.StringValue, v1alpha1.FileInfo]
	mkdirAll  *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	removeAll *connect.Client[wrapperspb.StringValue, emptypb.Empty]
}

// ReadDir calls bucketeer.filesystem.v1alpha1.Filesystem.ReadDir.
func (c *filesystemClient) ReadDir(ctx context.Context, req *connect.Request[v1alpha1.ReadDirRequest]) (*connect.Response[v1alpha1.ReadDirResponse], error) {
	return c.readDir.CallUnary(ctx, req)
}

// Stat calls bucketeer.filesystem.v1alpha1.Filesystem.Stat.
func (c *filesystemClient) Stat(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.FileInfo], error) {
	return c.stat.CallUnary(ctx, req)
}

// MkdirAll calls bucketeer.filesystem.v1alpha1.Filesystem.MkdirAll.
func (c *filesystemClient) MkdirAll(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.mkdirAll.CallUnary(ctx, req)
}

// RemoveAll calls bucketeer.filesystem.v1alpha1.Filesystem.RemoveAll.
func (c *filesystemClient) RemoveAll(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.removeAll.CallUnary(ctx, req)
}

// FilesystemHandler is an implementation of the bucketeer.filesystem.v1alpha1.Filesystem service.
type FilesystemHandler interface {
	// ReadDir returns a list of files in a directory.
	ReadDir(context.Context, *connect.Request[v1alpha1.ReadDirRequest]) (*connect.Response[v1alpha1.ReadDirResponse], error)
	// Stat returns information about a file or directory.
	Stat(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.FileInfo], error)
	// MkdirAll creates a directory and any necessary parents.
	MkdirAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// RemoveAll removes a directory and any children it contains.
	RemoveAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
}

// NewFilesystemHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFilesystemHandler(svc FilesystemHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	filesystemReadDirHandler := connect.NewUnaryHandler(
		FilesystemReadDirProcedure,
		svc.ReadDir,
		connect.WithSchema(filesystemReadDirMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemStatHandler := connect.NewUnaryHandler(
		FilesystemStatProcedure,
		svc.Stat,
		connect.WithSchema(filesystemStatMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemMkdirAllHandler := connect.NewUnaryHandler(
		FilesystemMkdirAllProcedure,
		svc.MkdirAll,
		connect.WithSchema(filesystemMkdirAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	filesystemRemoveAllHandler := connect.NewUnaryHandler(
		FilesystemRemoveAllProcedure,
		svc.RemoveAll,
		connect.WithSchema(filesystemRemoveAllMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bucketeer.filesystem.v1alpha1.Filesystem/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FilesystemReadDirProcedure:
			filesystemReadDirHandler.ServeHTTP(w, r)
		case FilesystemStatProcedure:
			filesystemStatHandler.ServeHTTP(w, r)
		case FilesystemMkdirAllProcedure:
			filesystemMkdirAllHandler.ServeHTTP(w, r)
		case FilesystemRemoveAllProcedure:
			filesystemRemoveAllHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFilesystemHandler returns CodeUnimplemented from all methods.
type UnimplementedFilesystemHandler struct{}

func (UnimplementedFilesystemHandler) ReadDir(context.Context, *connect.Request[v1alpha1.ReadDirRequest]) (*connect.Response[v1alpha1.ReadDirResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.filesystem.v1alpha1.Filesystem.ReadDir is not implemented"))
}

func (UnimplementedFilesystemHandler) Stat(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.FileInfo], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.filesystem.v1alpha1.Filesystem.Stat is not implemented"))
}

func (UnimplementedFilesystemHandler) MkdirAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.filesystem.v1alpha1.Filesystem.MkdirAll is not implemented"))
}

func (UnimplementedFilesystemHandler) RemoveAll(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.filesystem.v1alpha1.Filesystem.RemoveAll is not implemented"))
}
