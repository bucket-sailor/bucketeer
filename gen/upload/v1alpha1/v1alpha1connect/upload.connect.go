// SPDX-License-Identifier: AGPL-3.0-or-later
//
// Copyright 2024 Damian Peckett <damian@pecke.tt>.
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: upload/v1alpha1/upload.proto

package v1alpha1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1alpha1 "github.com/bucket-sailor/bucketeer/gen/upload/v1alpha1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UploadName is the fully-qualified name of the Upload service.
	UploadName = "bucketeer.upload.v1alpha1.Upload"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UploadNewProcedure is the fully-qualified name of the Upload's New RPC.
	UploadNewProcedure = "/bucketeer.upload.v1alpha1.Upload/New"
	// UploadAbortProcedure is the fully-qualified name of the Upload's Abort RPC.
	UploadAbortProcedure = "/bucketeer.upload.v1alpha1.Upload/Abort"
	// UploadCompleteProcedure is the fully-qualified name of the Upload's Complete RPC.
	UploadCompleteProcedure = "/bucketeer.upload.v1alpha1.Upload/Complete"
	// UploadPollForCompletionProcedure is the fully-qualified name of the Upload's PollForCompletion
	// RPC.
	UploadPollForCompletionProcedure = "/bucketeer.upload.v1alpha1.Upload/PollForCompletion"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	uploadServiceDescriptor                 = v1alpha1.File_upload_v1alpha1_upload_proto.Services().ByName("Upload")
	uploadNewMethodDescriptor               = uploadServiceDescriptor.Methods().ByName("New")
	uploadAbortMethodDescriptor             = uploadServiceDescriptor.Methods().ByName("Abort")
	uploadCompleteMethodDescriptor          = uploadServiceDescriptor.Methods().ByName("Complete")
	uploadPollForCompletionMethodDescriptor = uploadServiceDescriptor.Methods().ByName("PollForCompletion")
)

// UploadClient is a client for the bucketeer.upload.v1alpha1.Upload service.
type UploadClient interface {
	// New initiates a new upload and returns a unique identifier for the upload.
	New(context.Context, *connect.Request[v1alpha1.NewRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// Abort aborts an upload and cleans up any resources associated with it.
	Abort(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// Complete begins the process of completing an upload, data isn't guaranteed
	// to be flushed to disk until PollForCompletion() returns a status of
	// COMPLETED. We split this into two calls to allow for the possibility of a
	// long-running completion process (eg. transferring to remote storage).
	Complete(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// PollForCompletion polls for the completion of an upload (eg. has it been
	// fully flushed to disk?)
	PollForCompletion(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.CompleteResponse], error)
}

// NewUploadClient constructs a client for the bucketeer.upload.v1alpha1.Upload service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUploadClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UploadClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &uploadClient{
		new: connect.NewClient[v1alpha1.NewRequest, wrapperspb.StringValue](
			httpClient,
			baseURL+UploadNewProcedure,
			connect.WithSchema(uploadNewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		abort: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+UploadAbortProcedure,
			connect.WithSchema(uploadAbortMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		complete: connect.NewClient[wrapperspb.StringValue, emptypb.Empty](
			httpClient,
			baseURL+UploadCompleteProcedure,
			connect.WithSchema(uploadCompleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		pollForCompletion: connect.NewClient[wrapperspb.StringValue, v1alpha1.CompleteResponse](
			httpClient,
			baseURL+UploadPollForCompletionProcedure,
			connect.WithSchema(uploadPollForCompletionMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// uploadClient implements UploadClient.
type uploadClient struct {
	new               *connect.Client[v1alpha1.NewRequest, wrapperspb.StringValue]
	abort             *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	complete          *connect.Client[wrapperspb.StringValue, emptypb.Empty]
	pollForCompletion *connect.Client[wrapperspb.StringValue, v1alpha1.CompleteResponse]
}

// New calls bucketeer.upload.v1alpha1.Upload.New.
func (c *uploadClient) New(ctx context.Context, req *connect.Request[v1alpha1.NewRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return c.new.CallUnary(ctx, req)
}

// Abort calls bucketeer.upload.v1alpha1.Upload.Abort.
func (c *uploadClient) Abort(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.abort.CallUnary(ctx, req)
}

// Complete calls bucketeer.upload.v1alpha1.Upload.Complete.
func (c *uploadClient) Complete(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return c.complete.CallUnary(ctx, req)
}

// PollForCompletion calls bucketeer.upload.v1alpha1.Upload.PollForCompletion.
func (c *uploadClient) PollForCompletion(ctx context.Context, req *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.CompleteResponse], error) {
	return c.pollForCompletion.CallUnary(ctx, req)
}

// UploadHandler is an implementation of the bucketeer.upload.v1alpha1.Upload service.
type UploadHandler interface {
	// New initiates a new upload and returns a unique identifier for the upload.
	New(context.Context, *connect.Request[v1alpha1.NewRequest]) (*connect.Response[wrapperspb.StringValue], error)
	// Abort aborts an upload and cleans up any resources associated with it.
	Abort(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// Complete begins the process of completing an upload, data isn't guaranteed
	// to be flushed to disk until PollForCompletion() returns a status of
	// COMPLETED. We split this into two calls to allow for the possibility of a
	// long-running completion process (eg. transferring to remote storage).
	Complete(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error)
	// PollForCompletion polls for the completion of an upload (eg. has it been
	// fully flushed to disk?)
	PollForCompletion(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.CompleteResponse], error)
}

// NewUploadHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUploadHandler(svc UploadHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	uploadNewHandler := connect.NewUnaryHandler(
		UploadNewProcedure,
		svc.New,
		connect.WithSchema(uploadNewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	uploadAbortHandler := connect.NewUnaryHandler(
		UploadAbortProcedure,
		svc.Abort,
		connect.WithSchema(uploadAbortMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	uploadCompleteHandler := connect.NewUnaryHandler(
		UploadCompleteProcedure,
		svc.Complete,
		connect.WithSchema(uploadCompleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	uploadPollForCompletionHandler := connect.NewUnaryHandler(
		UploadPollForCompletionProcedure,
		svc.PollForCompletion,
		connect.WithSchema(uploadPollForCompletionMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/bucketeer.upload.v1alpha1.Upload/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UploadNewProcedure:
			uploadNewHandler.ServeHTTP(w, r)
		case UploadAbortProcedure:
			uploadAbortHandler.ServeHTTP(w, r)
		case UploadCompleteProcedure:
			uploadCompleteHandler.ServeHTTP(w, r)
		case UploadPollForCompletionProcedure:
			uploadPollForCompletionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUploadHandler returns CodeUnimplemented from all methods.
type UnimplementedUploadHandler struct{}

func (UnimplementedUploadHandler) New(context.Context, *connect.Request[v1alpha1.NewRequest]) (*connect.Response[wrapperspb.StringValue], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.upload.v1alpha1.Upload.New is not implemented"))
}

func (UnimplementedUploadHandler) Abort(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.upload.v1alpha1.Upload.Abort is not implemented"))
}

func (UnimplementedUploadHandler) Complete(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.upload.v1alpha1.Upload.Complete is not implemented"))
}

func (UnimplementedUploadHandler) PollForCompletion(context.Context, *connect.Request[wrapperspb.StringValue]) (*connect.Response[v1alpha1.CompleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bucketeer.upload.v1alpha1.Upload.PollForCompletion is not implemented"))
}
