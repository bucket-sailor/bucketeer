/* SPDX-License-Identifier: AGPL-3.0-or-later
 *
 * Copyright 2024 Damian Peckett <damian@pecke.tt>.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package bucketeer.filesystem.v1alpha1;

option go_package = "github.com/bucket-sailor/bucketeer/internal/gen/filesystem/v1alpha1";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service Filesystem {
  // ReadDir returns a list of files in a directory.
  rpc ReadDir(ReadDirRequest) returns (ReadDirResponse);
  // Stat returns information about a file or directory.
  rpc Stat(google.protobuf.StringValue) returns (FileInfo);
  // MkdirAll creates a directory and any necessary parents.
  rpc MkdirAll(google.protobuf.StringValue) returns (google.protobuf.Empty);
  // RemoveAll removes a directory and any children it contains.
  rpc RemoveAll(google.protobuf.StringValue) returns (google.protobuf.Empty);
}

message FileInfo {
  string name = 1;
  bool is_dir = 2;
  int64 size = 3;
  google.protobuf.Timestamp mod_time = 4;
}

message ReadDirRequest {
  string id = 1;
  string path = 2;
  int64 start_index = 3;
  int64 stop_index = 4;
}

message ReadDirResponse {
  message FileInfoWithIndex {
    // The position of the file in the complete directory listing.
    // This is effectively a stable identifier for the file across
    // multiple requests with the same list identifier.
    int64 index = 1;
    FileInfo file_info = 2;
  }

  // ID is a unique identifier for the operation. It can be used to
  // retrieve the same list of files in a subsequent request.
  // This avoids issues with unstable pagination.
  string id = 1;
  // Files is the list of files in the directory (limited to the
  // optionally provided start and stop indexes).
  repeated FileInfoWithIndex files = 2;
}